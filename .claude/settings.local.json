{
  "permissions": {
    "allow": [
      "mcp__context7__get-library-docs",
      "mcp__context7__resolve-library-id",
      "Bash(make:*)",
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=src python -c \"from agent.graph import graph; print(''Graph loaded successfully'')\")",
      "Bash(PYTHONPATH=src python -c \"from agent.agents.widget_agent_team import worker_nodes; print(''Worker nodes imported successfully''); print(worker_nodes.__all__)\")",
      "Bash(PYTHONPATH=src python -c \"from agent.graph import build_widget_agent_graph; print(''Graph builder imported successfully'')\")",
      "Bash(PYTHONPATH=src python -m py_compile src/agent/agents/widget_agent_team/worker_nodes.py)",
      "Bash(PYTHONPATH=src python -m py_compile src/agent/graph.py)",
      "Bash(PYTHONPATH=src python:*)",
      "WebFetch(domain:langchain-ai.github.io)",
      "Bash(pip install:*)",
      "WebFetch(domain:e2b.dev)",
      "WebFetch(domain:context7.com)",
      "Bash(env)",
      "WebSearch",
      "WebFetch(domain:python.langchain.com)",
      "Bash(printenv)",
      "Bash(E2B_SANDBOX_API_KEY=test_key PYTHONPATH=src python -c \"\nfrom agent.agents.widget_agent_team.tools.code_execution import create_e2b_sandbox\ntry:\n    # This should fail but show the right error message\n    sandbox = create_e2b_sandbox()\n    print(''Sandbox created successfully'')\nexcept Exception as e:\n    print(f''Expected error (testing API key handling): {e}'')\n    # Check if it''s trying to use the API key\n    if ''test_key'' in str(e) or ''API key'' in str(e):\n        print(''‚úì API key is being properly passed to E2B'')\n    else:\n        print(''‚úó API key handling issue'')\n\")",
      "Bash(E2B_SANDBOX_API_KEY=test_key PYTHONPATH=src python -c \"\nprint(''=== E2B SANDBOX CREATION TEST ==='')\n\nprint(''1. Testing config module import...'')\nfrom agent.agents.widget_agent_team.tools.import_utils import import_config\nconfig_module = import_config()\nprint(''‚úì Config module imported'')\n\nprint(''2. Testing API key retrieval...'')\ntry:\n    api_key = config_module.get_e2b_api_key()\n    print(f''‚úì API key retrieved: {api_key[:8]}...'')\nexcept Exception as e:\n    print(f''‚úó API key error: {e}'')\n\nprint(''3. Testing sandbox creation via config...'')\ntry:\n    sandbox = config_module.create_e2b_sandbox()\n    print(''‚úì Sandbox created successfully'')\nexcept Exception as e:\n    error_str = str(e)\n    if ''Invalid API key'' in error_str or ''401'' in error_str:\n        print(''‚úì Sandbox creation properly uses API key (got expected auth error)'')\n    else:\n        print(f''‚úó Sandbox creation error: {e}'')\n\nprint(''4. Testing sandbox creation via tool...'')\nfrom agent.agents.widget_agent_team.tools.code_execution import create_e2b_sandbox\ntry:\n    sandbox = create_e2b_sandbox()\n    print(''‚úì Tool sandbox created successfully'')\nexcept Exception as e:\n    error_str = str(e)\n    if ''Invalid API key'' in error_str or ''401'' in error_str:\n        print(''‚úì Tool sandbox creation properly uses API key (got expected auth error)'')\n    else:\n        print(f''‚úó Tool sandbox creation error: {e}'')\n\nprint()\nprint(''üéâ E2B SANDBOX API KEY HANDLING FIXED! üéâ'')\nprint(''The system is now properly retrieving and using the E2B_SANDBOX_API_KEY.'')\n\")",
      "Bash(mkdir:*)",
      "Bash(echo:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(.venv/bin/pip install -e .)",
      "Bash(export OPENAI_API_KEY=\"test_key\")",
      "Bash(PYTHONPATH=src .venv/bin/python -c \"\nfrom agent.models import TopLevelSupervisorState\nfrom agent.agents.top_level_supervisor.tools.data_reader import get_available_data\n\n# Test the data reader directly\nprint(''Testing get_available_data function...'')\ntry:\n    result = get_available_data(''CSpAe9A6GOn5DUCo8sOA0'')\n    print(f''Available files: {result[\"\"available_files\"\"]}'')\n    print(f''Data summary: {result[\"\"data_summary\"\"][:200]}...'')\n    print(''‚úÖ Data reader works correctly'')\nexcept Exception as e:\n    print(f''‚ùå Data reader error: {e}'')\n\")",
      "Bash(PYTHONPATH=src .venv/bin/python:*)",
      "Bash(PYTHONPATH=src timeout 30 .venv/bin/python -c \"\nimport os\nfrom dotenv import load_dotenv\nload_dotenv(''.env'')\n\nfrom agent.graph import graph\n\n# Quick test with shorter timeout\ntest_input = {\n    ''messages'': [], ''remaining_steps'': 5, ''user_prompt'': ''Test'',\n    ''user_id'': ''u1'', ''dashboard_id'': ''CSpAe9A6GOn5DUCo8sOA0'', ''chat_id'': ''c1'', ''request_id'': ''r1'',\n    ''context_widget_ids'': [], ''delegated_tasks'': [], ''available_files'': [], ''file_schemas'': [],\n    ''available_data_summary'': '''', ''current_reasoning'': '''', ''supervisor_status'': ''analyzing'',\n    ''error_messages'': [], ''tool_failure_counts'': {}, ''max_tool_retries'': 2, ''last_failed_tool'': None, ''all_tasks_completed'': False\n}\n\nprint(''Quick test of OpenAI integration...'')\ntry:\n    result = graph.invoke(test_input)\n    print(''‚úÖ SUCCESS - OpenAI calls are working!'')\n    print(f''Status: {result.get(\"\"supervisor_status\"\")}'')\n    print(f''Messages: {len(result.get(\"\"messages\"\", []))}'')\n    print(f''Data summary exists: {bool(result.get(\"\"available_data_summary\"\"))}'')\nexcept Exception as e:\n    print(f''Result: {str(e)[:200]}'')\n\")",
      "Bash(PYTHONPATH:*)"
    ],
    "deny": [],
    "ask": []
  }
}