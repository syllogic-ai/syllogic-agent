"""Main entry point and usage examples for the Widget Agent Team system."""

import asyncio
import json
from datetime import datetime
from typing import Any, Dict, List

from agent.models import ColumnInfo, FileSampleData, FileSchema, WidgetAgentState


class WidgetAgentRunner:
    """Main runner for the widget agent system."""

    def __init__(self):
        # Import graph here to avoid circular imports during module loading
        from agent.graph import graph

        self.graph = graph

    async def process_widget_task(
        self, widget_task: WidgetAgentState, thread_id: str = None
    ) -> WidgetAgentState:
        """Process a widget task through the agent graph."""

        # Use task_id as thread_id if not provided
        if thread_id is None:
            thread_id = widget_task.task_id

        # Create configuration with thread ID for state tracking
        config = {"configurable": {"thread_id": thread_id}}

        try:
            # Invoke the graph with the initial state
            result = await self.graph.ainvoke(widget_task.dict(), config=config)

            # Convert result back to Pydantic model
            return WidgetAgentState(**result)

        except Exception as e:
            # Handle errors gracefully
            widget_task.task_status = "failed"
            widget_task.error_messages.append(f"Graph execution error: {str(e)}")
            widget_task.updated_at = datetime.now()
            return widget_task

    def create_sample_task(
        self,
        user_prompt: str,
        widget_type: str,
        operation: str = "CREATE",
        file_ids: List[str] = None,
        title: str = "Sample Widget",
        description: str = "A sample widget generated by the agent",
    ) -> WidgetAgentState:
        """Create a sample widget task for testing."""

        # Create sample file schemas and data if file_ids provided
        file_schemas = []
        file_sample_data = []

        if file_ids:
            for i, file_id in enumerate(file_ids):
                # Sample schema
                schema = FileSchema(
                    file_id=file_id,
                    columns=[
                        ColumnInfo(
                            name="category",
                            type="string",
                            null_count=0,
                            unique_count=5,
                            sample_values=["A", "B", "C", "D", "E"],
                        ),
                        ColumnInfo(
                            name="value",
                            type="number",
                            null_count=0,
                            unique_count=10,
                            sample_values=[10, 20, 30, 40, 50],
                        ),
                    ],
                    total_rows=100,
                    total_columns=2,
                )
                file_schemas.append(schema)

                # Sample data
                sample = FileSampleData(
                    file_id=file_id,
                    headers=["category", "value"],
                    rows=[["A", 10], ["B", 20], ["C", 30], ["D", 40], ["E", 50]],
                    total_rows_in_file=100,
                    sample_rows_returned=5,
                )
                file_sample_data.append(sample)

        return WidgetAgentState(
            task_instructions=f"Create a {widget_type} widget based on the user request",
            user_prompt=user_prompt,
            operation=operation,
            widget_type=widget_type,
            file_ids=file_ids or [],
            file_schemas=file_schemas,
            file_sample_data=file_sample_data,
            title=title,
            description=description,
        )


# Usage Examples


async def example_bar_chart_with_data():
    """Example: Create a bar chart with file data."""
    print("=== Example: Bar Chart with File Data ===")

    runner = WidgetAgentRunner()

    # Create a sample task
    task = runner.create_sample_task(
        user_prompt="Create a bar chart showing sales by category",
        widget_type="bar",
        file_ids=["sample_file_1"],
        title="Sales by Category",
        description="Bar chart showing sales data grouped by category",
    )

    print(f"Initial task: {task.task_id}")
    print(f"Status: {task.task_status}")

    # Process the task
    result = await runner.process_widget_task(task)

    print(f"Final status: {result.task_status}")
    print(f"Data validated: {result.data_validated}")
    print(f"Iterations: {result.iteration_count}")

    if result.data:
        print("Generated data:")
        print(json.dumps(result.data, indent=2))

    if result.error_messages:
        print("Errors encountered:")
        for error in result.error_messages:
            print(f"  - {error}")

    if result.widget_metadata:
        print("Widget metadata:")
        print(json.dumps(result.widget_metadata, indent=2))

    return result


async def example_pie_chart_without_data():
    """Example: Create a pie chart without file data."""
    print("\n=== Example: Pie Chart without File Data ===")

    runner = WidgetAgentRunner()

    # Create a task without file data
    task = runner.create_sample_task(
        user_prompt="Create a pie chart showing distribution of different categories",
        widget_type="pie",
        file_ids=[],  # No file data
        title="Category Distribution",
        description="Pie chart showing sample category distribution",
    )

    print(f"Initial task: {task.task_id}")
    print(f"Status: {task.task_status}")

    # Process the task
    result = await runner.process_widget_task(task)

    print(f"Final status: {result.task_status}")
    print(f"Data validated: {result.data_validated}")

    if result.data:
        print("Generated data:")
        print(json.dumps(result.data, indent=2))

    return result


async def example_kpi_widget():
    """Example: Create a KPI widget."""
    print("\n=== Example: KPI Widget ===")

    runner = WidgetAgentRunner()

    task = runner.create_sample_task(
        user_prompt="Create a KPI widget showing total revenue",
        widget_type="kpi",
        file_ids=["revenue_file"],
        title="Total Revenue",
        description="KPI showing total revenue with trend information",
    )

    print(f"Processing KPI task: {task.task_id}")

    result = await runner.process_widget_task(task)

    print(f"Final status: {result.task_status}")
    if result.data:
        print("Generated KPI data:")
        print(json.dumps(result.data, indent=2))

    return result


async def example_table_widget():
    """Example: Create a table widget."""
    print("\n=== Example: Table Widget ===")

    runner = WidgetAgentRunner()

    task = runner.create_sample_task(
        user_prompt="Create a table showing customer information",
        widget_type="table",
        file_ids=["customer_file"],
        title="Customer Information",
        description="Table showing customer details",
    )

    print(f"Processing table task: {task.task_id}")

    result = await runner.process_widget_task(task)

    print(f"Final status: {result.task_status}")
    if result.data:
        print(f"Table has {len(result.data)} rows")
        if result.data:
            print("First few rows:")
            for i, row in enumerate(result.data[:3]):
                print(f"  Row {i + 1}: {row}")

    return result


async def run_all_examples():
    """Run all example scenarios."""
    print("🚀 Starting Widget Agent Team Examples\n")

    try:
        # Run different widget type examples
        await example_bar_chart_with_data()
        await example_pie_chart_without_data()
        await example_kpi_widget()
        await example_table_widget()

        print("\n✅ All examples completed successfully!")

    except Exception as e:
        print(f"\n❌ Error running examples: {str(e)}")


def main():
    """Main entry point for running examples."""
    asyncio.run(run_all_examples())


# Direct usage example
async def create_custom_widget(
    user_prompt: str,
    widget_type: str,
    file_ids: List[str] = None,
    title: str = "Custom Widget",
    description: str = "Custom widget",
) -> WidgetAgentState:
    """Create a custom widget with specific parameters."""

    runner = WidgetAgentRunner()

    task = runner.create_sample_task(
        user_prompt=user_prompt,
        widget_type=widget_type,
        file_ids=file_ids or [],
        title=title,
        description=description,
    )

    result = await runner.process_widget_task(task)
    return result


# Export main components
__all__ = ["WidgetAgentRunner", "create_custom_widget", "run_all_examples", "main"]


if __name__ == "__main__":
    main()
